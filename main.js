(()=>{"use strict";const e=(e,o)=>({save:()=>{const n=t(e);n.push(o);const r=JSON.stringify(n);localStorage.setItem(e,r)},override:()=>{localStorage.setItem(e,o)}}),t=e=>JSON.parse(localStorage.getItem(e))||JSON.parse(JSON.stringify([])),o=document.querySelector(".content"),n=(document.querySelector(".add-task"),()=>{const e=t("projectList"),o=("currentProjectId",JSON.parse(localStorage.getItem("currentProjectId")));let n=e[o];console.log(e),console.log(o),console.log(typeof o),console.log(`first project: ${e[0].name}`),console.log(`currentProject: ${n} `),console.log(`current project name: ${n.name}`),n.tasks.length&&console.log("at least 1 task(s)")}),r=()=>{const e=document.querySelector(".projectInput");let t=(e=>{const t=[];return{name:e,tasks:t,length:t.length}})(e.value);console.log(t),console.log(typeof t),s(),l(t),i(),e.value=""},l=t=>{e("projectList",t).save(),console.log(`save ${t.name} to local storage`)},i=()=>{let e=t("projectList");const o=document.querySelector(".projectContent");o.innerHTML="";for(let t=0;t<e.length;t++){const n=document.createElement("div"),r=document.createElement("div"),l=document.createElement("div"),i=document.createElement("div");n.classList.add("projectContainer"),n.setAttribute("data-project-id",t),r.textContent=e[t].name,l.textContent=e[t].length,l.classList.add("projectLength"),i.innerHTML='<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 64 64" enable-background="new 0 0 64 64" xml:space="preserve" fill="#ffffff"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="16" y1="24" x2="38" y2="24"></line> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="16" y1="34" x2="38" y2="34"></line> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="16" y1="44" x2="38" y2="44"></line> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="16" y1="54" x2="38" y2="54"></line> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="12" y1="24" x2="8" y2="24"></line> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="12" y1="34" x2="8" y2="34"></line> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="12" y1="44" x2="8" y2="44"></line> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="12" y1="54" x2="8" y2="54"></line> <polyline fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" points="14,8 1,8 1,63 45,63 45,8 32,8 "></polyline> <polygon fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" points="27,5 27,1 19,1 19,5 15,5 13,13 33,13 31,5 "></polygon> <polygon fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" points="55,1 55,54 59,62 63,54 63,1 "></polygon> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="55" y1="11" x2="63" y2="11"></line> </g></svg>',n.appendChild(i),n.appendChild(r),n.appendChild(l),o.appendChild(n)}};function c(){const e=document.querySelector(".add-project"),t=document.querySelector(".projectForm");e.style.display="none",t.style.display="block"}function s(){const e=document.querySelector(".add-project"),t=document.querySelector(".projectForm");e.style.display="block",t.style.display="none"}document.querySelector(".sidebar"),document.querySelector(".add-project"),i(),document.querySelector(".sidebar").appendChild((()=>{const e=document.createElement("div"),t=document.createElement("input"),o=document.createElement("div"),n=document.createElement("button"),r=document.createElement("button");return e.classList.add("projectForm"),o.classList.add("btnContainer"),t.setAttribute("type","text"),t.classList.add("projectInput"),t.placeholder="Project Name",n.textContent="Create",n.setAttribute("type","button"),n.classList.add("createBtn"),r.textContent="Cancel",r.setAttribute("type","button"),r.classList.add("cancelBtn"),o.appendChild(n),o.appendChild(r),e.appendChild(t),e.appendChild(o),{projectForm:e}})().projectForm),document.querySelector(".add-project").addEventListener("click",c),document.querySelector(".createBtn").addEventListener("click",r),document.querySelector(".cancelBtn").addEventListener("click",s),t("projectList"),document.querySelectorAll(".projectContainer").forEach((t=>{const r=t.getAttribute("data-project-id");console.log(t),console.log(r),t.addEventListener("click",(()=>{e("currentProjectId",r).override(),console.log(`save ${r} to local storage`),n(),(()=>{const e=document.querySelector(".add-task"),t=document.createElement("div"),n=document.createElement("div");n.innerHTML='<svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 24 24" width="24px" height="24px" fill-rule="evenodd"><path fill-rule="evenodd" d="M 11 2 L 11 11 L 2 11 L 2 13 L 11 13 L 11 22 L 13 22 L 13 13 L 22 13 L 22 11 L 13 11 L 13 2 Z"/></svg>\n    ';const r=document.createElement("div");null!==e&&e.remove(),t.classList.add("add-task"),r.innerHTML="ADD TASK",t.appendChild(n),t.appendChild(r),o.appendChild(t)})()}))})),document.querySelector(".projectForm").style.display="none"})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,