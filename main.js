(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var r=n.getElementsByTagName("script");if(r.length)for(var a=r.length-1;a>-1&&!t;)t=r[a--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();const t=(e,t)=>({save:()=>{const r=n(e);r.push(t);const a=JSON.stringify(r);localStorage.setItem(e,a)},override:()=>{const n=JSON.stringify(t);localStorage.setItem(e,n)}}),n=e=>JSON.parse(localStorage.getItem(e))||JSON.parse(JSON.stringify([])),r=e=>JSON.parse(localStorage.getItem(e));let a=document.querySelector(".content");function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function i(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function l(e){i(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===o(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function d(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function s(e){i(1,arguments);var t=l(e),n=t.getUTCDay(),r=(n<1?7:0)+n-1;return t.setUTCDate(t.getUTCDate()-r),t.setUTCHours(0,0,0,0),t}function u(e){i(1,arguments);var t=l(e),n=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(n+1,0,4),r.setUTCHours(0,0,0,0);var a=s(r),o=new Date(0);o.setUTCFullYear(n,0,4),o.setUTCHours(0,0,0,0);var d=s(o);return t.getTime()>=a.getTime()?n+1:t.getTime()>=d.getTime()?n:n-1}var c={};function m(){return c}function f(e,t){var n,r,a,o,s,u,c,f;i(1,arguments);var h=m(),g=d(null!==(n=null!==(r=null!==(a=null!==(o=null==t?void 0:t.weekStartsOn)&&void 0!==o?o:null==t||null===(s=t.locale)||void 0===s||null===(u=s.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==a?a:h.weekStartsOn)&&void 0!==r?r:null===(c=h.locale)||void 0===c||null===(f=c.options)||void 0===f?void 0:f.weekStartsOn)&&void 0!==n?n:0);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var v=l(e),p=v.getUTCDay(),y=(p<g?7:0)+p-g;return v.setUTCDate(v.getUTCDate()-y),v.setUTCHours(0,0,0,0),v}function h(e,t){var n,r,a,o,s,u,c,h;i(1,arguments);var g=l(e),v=g.getUTCFullYear(),p=m(),y=d(null!==(n=null!==(r=null!==(a=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(s=t.locale)||void 0===s||null===(u=s.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==a?a:p.firstWeekContainsDate)&&void 0!==r?r:null===(c=p.locale)||void 0===c||null===(h=c.options)||void 0===h?void 0:h.firstWeekContainsDate)&&void 0!==n?n:1);if(!(y>=1&&y<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var w=new Date(0);w.setUTCFullYear(v+1,0,y),w.setUTCHours(0,0,0,0);var b=f(w,t),k=new Date(0);k.setUTCFullYear(v,0,y),k.setUTCHours(0,0,0,0);var T=f(k,t);return g.getTime()>=b.getTime()?v+1:g.getTime()>=T.getTime()?v:v-1}function g(e,t){for(var n=e<0?"-":"",r=Math.abs(e).toString();r.length<t;)r="0"+r;return n+r}const v=function(e,t){var n=e.getUTCFullYear(),r=n>0?n:1-n;return g("yy"===t?r%100:r,t.length)},p=function(e,t){var n=e.getUTCMonth();return"M"===t?String(n+1):g(n+1,2)},y=function(e,t){return g(e.getUTCDate(),t.length)},w=function(e,t){return g(e.getUTCHours()%12||12,t.length)},b=function(e,t){return g(e.getUTCHours(),t.length)},k=function(e,t){return g(e.getUTCMinutes(),t.length)},T=function(e,t){return g(e.getUTCSeconds(),t.length)},C=function(e,t){var n=t.length,r=e.getUTCMilliseconds();return g(Math.floor(r*Math.pow(10,n-3)),t.length)};var D={G:function(e,t,n){var r=e.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){var r=e.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return v(e,t)},Y:function(e,t,n,r){var a=h(e,r),o=a>0?a:1-a;return"YY"===t?g(o%100,2):"Yo"===t?n.ordinalNumber(o,{unit:"year"}):g(o,t.length)},R:function(e,t){return g(u(e),t.length)},u:function(e,t){return g(e.getUTCFullYear(),t.length)},Q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return g(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){var r=Math.ceil((e.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return g(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){var r=e.getUTCMonth();switch(t){case"M":case"MM":return p(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){var r=e.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return g(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){var a=function(e,t){i(1,arguments);var n=l(e),r=f(n,t).getTime()-function(e,t){var n,r,a,o,l,s,u,c;i(1,arguments);var g=m(),v=d(null!==(n=null!==(r=null!==(a=null!==(o=null==t?void 0:t.firstWeekContainsDate)&&void 0!==o?o:null==t||null===(l=t.locale)||void 0===l||null===(s=l.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==a?a:g.firstWeekContainsDate)&&void 0!==r?r:null===(u=g.locale)||void 0===u||null===(c=u.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==n?n:1),p=h(e,t),y=new Date(0);return y.setUTCFullYear(p,0,v),y.setUTCHours(0,0,0,0),f(y,t)}(n,t).getTime();return Math.round(r/6048e5)+1}(e,r);return"wo"===t?n.ordinalNumber(a,{unit:"week"}):g(a,t.length)},I:function(e,t,n){var r=function(e){i(1,arguments);var t=l(e),n=s(t).getTime()-function(e){i(1,arguments);var t=u(e),n=new Date(0);return n.setUTCFullYear(t,0,4),n.setUTCHours(0,0,0,0),s(n)}(t).getTime();return Math.round(n/6048e5)+1}(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):g(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getUTCDate(),{unit:"date"}):y(e,t)},D:function(e,t,n){var r=function(e){i(1,arguments);var t=l(e),n=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=n-t.getTime();return Math.floor(r/864e5)+1}(e);return"Do"===t?n.ordinalNumber(r,{unit:"dayOfYear"}):g(r,t.length)},E:function(e,t,n){var r=e.getUTCDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(o);case"ee":return g(o,2);case"eo":return n.ordinalNumber(o,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){var a=e.getUTCDay(),o=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(o);case"cc":return g(o,t.length);case"co":return n.ordinalNumber(o,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(e,t,n){var r=e.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return g(a,t.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){var r=e.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){var r,a=e.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(e,t,n){var r,a=e.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){var r=e.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return w(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getUTCHours(),{unit:"hour"}):b(e,t)},K:function(e,t,n){var r=e.getUTCHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):g(r,t.length)},k:function(e,t,n){var r=e.getUTCHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):g(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getUTCMinutes(),{unit:"minute"}):k(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getUTCSeconds(),{unit:"second"}):T(e,t)},S:function(e,t){return C(e,t)},X:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return M(a);case"XXXX":case"XX":return L(a);default:return L(a,":")}},x:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"x":return M(a);case"xxxx":case"xx":return L(a);default:return L(a,":")}},O:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+S(a,":");default:return"GMT"+L(a,":")}},z:function(e,t,n,r){var a=(r._originalDate||e).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+S(a,":");default:return"GMT"+L(a,":")}},t:function(e,t,n,r){var a=r._originalDate||e;return g(Math.floor(a.getTime()/1e3),t.length)},T:function(e,t,n,r){return g((r._originalDate||e).getTime(),t.length)}};function S(e,t){var n=e>0?"-":"+",r=Math.abs(e),a=Math.floor(r/60),o=r%60;if(0===o)return n+String(a);var i=t||"";return n+String(a)+i+g(o,2)}function M(e,t){return e%60==0?(e>0?"-":"+")+g(Math.abs(e)/60,2):L(e,t)}function L(e,t){var n=t||"",r=e>0?"-":"+",a=Math.abs(e);return r+g(Math.floor(a/60),2)+n+g(a%60,2)}const x=D;var E=function(e,t){switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},j=function(e,t){switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}},N={p:j,P:function(e,t){var n,r=e.match(/(P+)(p+)?/)||[],a=r[1],o=r[2];if(!o)return E(e,t);switch(a){case"P":n=t.dateTime({width:"short"});break;case"PP":n=t.dateTime({width:"medium"});break;case"PPP":n=t.dateTime({width:"long"});break;default:n=t.dateTime({width:"full"})}return n.replace("{{date}}",E(a,t)).replace("{{time}}",j(o,t))}};const U=N;var P=["D","DD"],q=["YY","YYYY"];function W(e,t,n){if("YYYY"===e)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===e)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===e)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===e)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(n,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var A={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Y(e){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}var H,O={date:Y({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Y({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Y({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},F={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function I(e){return function(t,n){var r;if("formatting"===(null!=n&&n.context?String(n.context):"standalone")&&e.formattingValues){var a=e.defaultFormattingWidth||e.defaultWidth,o=null!=n&&n.width?String(n.width):a;r=e.formattingValues[o]||e.formattingValues[a]}else{var i=e.defaultWidth,l=null!=n&&n.width?String(n.width):e.defaultWidth;r=e.values[l]||e.values[i]}return r[e.argumentCallback?e.argumentCallback(t):t]}}function B(e){return function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],o=t.match(a);if(!o)return null;var i,l=o[0],d=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],s=Array.isArray(d)?function(e,t){for(var n=0;n<e.length;n++)if(e[n].test(l))return n}(d):function(e,t){for(var n in e)if(e.hasOwnProperty(n)&&e[n].test(l))return n}(d);return i=e.valueCallback?e.valueCallback(s):s,{value:i=n.valueCallback?n.valueCallback(i):i,rest:t.slice(l.length)}}}const z={code:"en-US",formatDistance:function(e,t,n){var r,a=A[e];return r="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),null!=n&&n.addSuffix?n.comparison&&n.comparison>0?"in "+r:r+" ago":r},formatLong:O,formatRelative:function(e,t,n,r){return F[e]},localize:{ordinalNumber:function(e,t){var n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:I({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:I({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(e){return e-1}}),month:I({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:I({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:I({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(H={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(e){return parseInt(e,10)}},function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=e.match(H.matchPattern);if(!n)return null;var r=n[0],a=e.match(H.parsePattern);if(!a)return null;var o=H.valueCallback?H.valueCallback(a[0]):a[0];return{value:o=t.valueCallback?t.valueCallback(o):o,rest:e.slice(r.length)}}),era:B({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:B({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(e){return e+1}}),month:B({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:B({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:B({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};var G=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,R=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,$=/^'([^]*?)'?$/,Q=/''/g,X=/[a-zA-Z]/;function J(e,t,n){var r,a,s,u,c,f,h,g,v,p,y,w,b,k,T,C,D,S;i(2,arguments);var M=String(t),L=m(),E=null!==(r=null!==(a=null==n?void 0:n.locale)&&void 0!==a?a:L.locale)&&void 0!==r?r:z,j=d(null!==(s=null!==(u=null!==(c=null!==(f=null==n?void 0:n.firstWeekContainsDate)&&void 0!==f?f:null==n||null===(h=n.locale)||void 0===h||null===(g=h.options)||void 0===g?void 0:g.firstWeekContainsDate)&&void 0!==c?c:L.firstWeekContainsDate)&&void 0!==u?u:null===(v=L.locale)||void 0===v||null===(p=v.options)||void 0===p?void 0:p.firstWeekContainsDate)&&void 0!==s?s:1);if(!(j>=1&&j<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var N=d(null!==(y=null!==(w=null!==(b=null!==(k=null==n?void 0:n.weekStartsOn)&&void 0!==k?k:null==n||null===(T=n.locale)||void 0===T||null===(C=T.options)||void 0===C?void 0:C.weekStartsOn)&&void 0!==b?b:L.weekStartsOn)&&void 0!==w?w:null===(D=L.locale)||void 0===D||null===(S=D.options)||void 0===S?void 0:S.weekStartsOn)&&void 0!==y?y:0);if(!(N>=0&&N<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!E.localize)throw new RangeError("locale must contain localize property");if(!E.formatLong)throw new RangeError("locale must contain formatLong property");var A=l(e);if(!function(e){if(i(1,arguments),!function(e){return i(1,arguments),e instanceof Date||"object"===o(e)&&"[object Date]"===Object.prototype.toString.call(e)}(e)&&"number"!=typeof e)return!1;var t=l(e);return!isNaN(Number(t))}(A))throw new RangeError("Invalid time value");var Y=function(e){var t=new Date(Date.UTC(e.getFullYear(),e.getMonth(),e.getDate(),e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()));return t.setUTCFullYear(e.getFullYear()),e.getTime()-t.getTime()}(A),H=function(e,t){return i(2,arguments),function(e,t){i(2,arguments);var n=l(e).getTime(),r=d(t);return new Date(n+r)}(e,-d(t))}(A,Y),O={firstWeekContainsDate:j,weekStartsOn:N,locale:E,_originalDate:A};return M.match(R).map((function(e){var t=e[0];return"p"===t||"P"===t?(0,U[t])(e,E.formatLong):e})).join("").match(G).map((function(r){if("''"===r)return"'";var a,o,i=r[0];if("'"===i)return(o=(a=r).match($))?o[1].replace(Q,"'"):a;var l,d=x[i];if(d)return null!=n&&n.useAdditionalWeekYearTokens||(l=r,-1===q.indexOf(l))||W(r,t,String(e)),null!=n&&n.useAdditionalDayOfYearTokens||!function(e){return-1!==P.indexOf(e)}(r)||W(r,t,String(e)),d(H,r,E.localize,O);if(i.match(X))throw new RangeError("Format string contains an unescaped latin alphabet character `"+i+"`");return r})).join("")}Math.pow(10,8);var _=36e5;var Z={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},V=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,K=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,ee=/^([+-])(\d{2})(?::?(\d{2}))?$/;function te(e){return e?parseInt(e):1}function ne(e){return e&&parseFloat(e.replace(",","."))||0}var re=[31,null,31,30,31,30,31,31,30,31,30,31];function ae(e){return e%400==0||e%4==0&&e%100!=0}const oe=e.p+"96b5f6c80090f815226b.png",ie=e.p+"08a67c7cfd1a756684d8.png",le=e.p+"581158c894c27e08ac94.png",de=e.p+"d4df898ea75a43d9e344.png",se=e.p+"fb8b5232f3f46646b5e2.png";let ue=document.querySelector(".content");document.querySelector(".add-task");const ce=()=>{let e=n("projectList")[r("currentProjectId")],t=e.tasks;console.log(`current project name: ${e.name}`),console.log(e);let a=document.querySelector(".listContainer");const o=document.createElement("div"),i=document.createElement("div"),l=document.createElement("button"),d=document.createElement("div");if(o.classList.add("projectNameDiv"),i.classList.add("projectName"),l.classList.add("deleteProject"),d.classList.add("lists"),a.innerHTML="",l.innerHTML="Delete Project",i.innerHTML=e.name,t.length)for(let e=0;e<t.length;e++){const n=document.createElement("div"),r=document.createElement("img"),a=document.createElement("div"),o=document.createElement("div"),i=document.createElement("button"),l=document.createElement("img"),s=document.createElement("img"),u=t[e].priority;let c=t[e].completed;n.classList.add("listDiv"),r.classList.add("checkbox"),o.classList.add("dueDay"),i.classList.add("detail"),l.classList.add("editTask"),s.classList.add("deleteTask"),r.setAttribute("src",!0===c?ie:oe),a.innerHTML=t[e].title,o.innerHTML=t[e].dueDay,i.innerHTML="DETAIL",i.setAttribute("type","button"),l.setAttribute("src",le),l.setAttribute("alt","Editing"),s.setAttribute("src",de),s.setAttribute("alt","Delete"),n.setAttribute("data-task-id",e),r.setAttribute("data-task-id",e),i.setAttribute("data-task-id",e),l.setAttribute("data-task-id",e),s.setAttribute("data-task-id",e),n.appendChild(r),n.appendChild(a),n.appendChild(o),n.appendChild(i),n.appendChild(l),n.appendChild(s),d.appendChild(n),"HIGH"===u&&(n.style.borderLeftColor="rgb(238, 37, 37)"),"MEDIUM"===u&&(n.style.borderLeftColor="rgb(8, 131, 149)"),"LOW"===u&&(n.style.borderLeftColor="rgb(255, 229, 105)")}else d.innerHTML="This project has no task so far.";o.appendChild(i),o.appendChild(l),a.appendChild(o),a.appendChild(d)},me=()=>n("projectList")[r("currentProjectId")],fe=e=>me().tasks[e],he=()=>{const e=document.querySelector(".closeBtn"),t=document.querySelector(".overlay"),n=document.querySelector(".renderDetailDiv");e.addEventListener("click",(()=>{t.remove(),n.remove()})),t.addEventListener("click",(()=>{t.remove(),n.remove()}))},ge=()=>{document.querySelectorAll(".checkbox").forEach((e=>{e.addEventListener("click",(()=>{const a=e.getAttribute("data-task-id");let o=fe(a),i=e.getAttribute("src");console.log(o),e.setAttribute("src",i==oe?ie:oe),console.log("change checkbox img"),o.completed=1!=o.completed,console.log(o.completed),((e,a)=>{let o=n("projectList");const i=r("currentProjectId");let l=o[i],d=l.tasks;d[e]=a,console.log(d[e]),o[i]=l,console.log(l),t("projectList",o).override();let s=n("projectList");console.log(s)})(a,o)}))})),document.querySelectorAll(".detail").forEach((e=>{e.addEventListener("click",(e=>{(e=>{console.log(e.target);const t=me(),n=e.target.getAttribute("data-task-id");let r=fe(n);const a=document.createElement("div");let o=document.createElement("div");a.classList.add("overlay"),o.classList.add("renderDetailDiv"),o.innerHTML=`<div class="detailContainer">\n        <img src="${se}" alt="Close Cross" class="closeBtn">\n        <h2>Task: ${r.title}</h2>\n        <div>Project: ${t.name}</div>\n        <div>Priority: <strong>${r.priority}</strong></div>\n        <div>Due Day: <strong>${r.dueDay}</strong></div>\n        <div>Details: ${r.details=""==r.details?"No details provided.":r.details}</div>\n    </div>\n    `,ue.appendChild(a),ue.appendChild(o)})(e),he()}))})),document.querySelectorAll(".deleteTask").forEach((e=>{e.addEventListener("click",(e=>{let r=n("projectList"),a=n("currentProjectId"),o=me();const i=e.target.getAttribute("data-task-id");console.log(i),console.log(o.tasks),o.tasks.splice(i,1),o.length-=1,console.log(o.length),r[a]=o,t("projectList",r).override(),console.log("delete event"),ce(),Te()}))})),document.querySelector(".deleteProject").addEventListener("click",(()=>{let e=n("projectList"),r=n("currentProjectId");e.splice(r,1),t("projectList",e).override(),console.log("delete project event"),ce(),Te()}))},ve=()=>{const e=document.querySelector("#title"),t=document.querySelector("#details"),n=document.querySelector("#due"),r=document.querySelector('input[name="priority"]:checked');let a=((e,t,n,r,a=!1)=>{let o=e,i=t,l=n,d=r,s=a;return{get title(){return o},set title(e){o=e},get details(){return i},set details(e){i=e},get dueDay(){return l},set dueDay(e){l=e},get priority(){return d},set priority(e){d=e},get completed(){return s},set completed(e){s=e}}})(e.value,t.value,n.value,r.value);const o=(e=>(console.log(e),J(function(e,t){var n;i(1,arguments);var r=d(null!==(n=null==t?void 0:t.additionalDigits)&&void 0!==n?n:2);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof e&&"[object String]"!==Object.prototype.toString.call(e))return new Date(NaN);var a,o=function(e){var t,n={},r=e.split(Z.dateTimeDelimiter);if(r.length>2)return n;if(/:/.test(r[0])?t=r[0]:(n.date=r[0],t=r[1],Z.timeZoneDelimiter.test(n.date)&&(n.date=e.split(Z.timeZoneDelimiter)[0],t=e.substr(n.date.length,e.length))),t){var a=Z.timezone.exec(t);a?(n.time=t.replace(a[1],""),n.timezone=a[1]):n.time=t}return n}(e);if(o.date){var l=function(e,t){var n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};var a=r[1]?parseInt(r[1]):null,o=r[2]?parseInt(r[2]):null;return{year:null===o?a:100*o,restDateString:e.slice((r[1]||r[2]).length)}}(o.date,r);a=function(e,t){if(null===t)return new Date(NaN);var n=e.match(V);if(!n)return new Date(NaN);var r=!!n[4],a=te(n[1]),o=te(n[2])-1,i=te(n[3]),l=te(n[4]),d=te(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,l,d)?function(e,t,n){var r=new Date(0);r.setUTCFullYear(e,0,4);var a=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(t,l,d):new Date(NaN);var s=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(re[t]||(ae(e)?29:28))}(t,o,i)&&function(e,t){return t>=1&&t<=(ae(e)?366:365)}(t,a)?(s.setUTCFullYear(t,o,Math.max(a,i)),s):new Date(NaN)}(l.restDateString,l.year)}if(!a||isNaN(a.getTime()))return new Date(NaN);var s,u=a.getTime(),c=0;if(o.time&&(c=function(e){var t=e.match(K);if(!t)return NaN;var n=ne(t[1]),r=ne(t[2]),a=ne(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,r,a)?n*_+6e4*r+1e3*a:NaN}(o.time),isNaN(c)))return new Date(NaN);if(!o.timezone){var m=new Date(u+c),f=new Date(0);return f.setFullYear(m.getUTCFullYear(),m.getUTCMonth(),m.getUTCDate()),f.setHours(m.getUTCHours(),m.getUTCMinutes(),m.getUTCSeconds(),m.getUTCMilliseconds()),f}return s=function(e){if("Z"===e)return 0;var t=e.match(ee);if(!t)return 0;var n="+"===t[1]?-1:1,r=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(r*_+6e4*a):NaN}(o.timezone),isNaN(s)?new Date(NaN):new Date(u+c+s)}(e),"MM/dd")))(a.dueDay);console.log(o),pe(a),ce(),ge()},pe=e=>{let a=n("projectList");const o=r("currentProjectId");let i=a[o];console.log(i);let l=i.tasks;l.push(e),console.log(l),i.tasks=l,i.length=i.tasks.length,a[o]=i,console.log(a),t("projectList",a).override();let d=n("projectList");console.log(d)},ye=()=>{const e=document.querySelector(".createTaskBtn"),t=document.querySelector(".cancelTaskBtn"),n=document.querySelector(".add-task"),r=document.querySelector(".overlay"),a=document.querySelector(".taskFormContainer");e.addEventListener("click",(e=>{e.preventDefault(),console.log("create task btn clicked"),we()&&(ve(),n.style.display="block",r.remove(),a.remove())})),t.addEventListener("click",(()=>{console.log("cancel task btn clicked"),n.style.display="block",r.remove(),a.remove()})),r.addEventListener("click",(()=>{n.style.display="block",r.remove(),a.remove()}))},we=()=>{const e=document.querySelector("#title"),t=document.querySelector("#due"),n=document.querySelector(".titleDiv"),r=document.querySelector(".dueDiv");let a=document.createElement("div"),o=document.createElement("div");a.classList.add("titleError"),o.classList.add("dueError");const i=document.querySelector(".titleError"),l=document.querySelector(".dueError");return i&&i.remove(),l&&l.remove(),n.appendChild(a),r.appendChild(o),e.value.length<2?(a.innerHTML="Please enter title for at least two letters.",!1):(a.innerHTML="",""===t.value?(o.innerHTML="Please enter due date.",!1):(o.innerHTML="",console.log("Form is valid"),!0))},be=()=>{const e=document.querySelector(".projectInput");let t=(e=>{let t=[];return{name:e,tasks:t,length:t.length}})(e.value);console.log(t),console.log(typeof t),Se(),ke(t),Te(),Ce(),e.value=""},ke=e=>{t("projectList",e).save(),console.log(`save ${e.name} to local storage`)},Te=()=>{let e=n("projectList");const t=document.querySelector(".projectContent");t.innerHTML="";for(let n=0;n<e.length;n++){const r=document.createElement("div"),a=document.createElement("div"),o=document.createElement("div"),i=document.createElement("div");r.classList.add("projectContainer"),r.setAttribute("data-project-id",n),a.textContent=e[n].name,o.textContent=e[n].length,o.classList.add("projectLength"),i.innerHTML='<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0 0 64 64" enable-background="new 0 0 64 64" xml:space="preserve" fill="#ffffff"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="16" y1="24" x2="38" y2="24"></line> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="16" y1="34" x2="38" y2="34"></line> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="16" y1="44" x2="38" y2="44"></line> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="16" y1="54" x2="38" y2="54"></line> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="12" y1="24" x2="8" y2="24"></line> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="12" y1="34" x2="8" y2="34"></line> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="12" y1="44" x2="8" y2="44"></line> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="12" y1="54" x2="8" y2="54"></line> <polyline fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" points="14,8 1,8 1,63 45,63 45,8 32,8 "></polyline> <polygon fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" points="27,5 27,1 19,1 19,5 15,5 13,13 33,13 31,5 "></polygon> <polygon fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" points="55,1 55,54 59,62 63,54 63,1 "></polygon> <line fill="none" stroke="#ffffff" stroke-width="2" stroke-miterlimit="10" x1="55" y1="11" x2="63" y2="11"></line> </g></svg>',r.appendChild(i),r.appendChild(a),r.appendChild(o),t.appendChild(r)}},Ce=()=>{n("projectList"),document.querySelectorAll(".projectContainer").forEach((e=>{let n=e.getAttribute("data-project-id");e.addEventListener("click",(()=>{t("currentProjectId",n).override(),console.log(`save ${n} to local storage`),ce(),(()=>{const e=document.querySelector(".add-task"),t=document.createElement("div"),n=document.createElement("div");n.innerHTML='<svg xmlns="http://www.w3.org/2000/svg"  viewBox="0 0 24 24" width="24px" height="24px" fill-rule="evenodd"><path fill-rule="evenodd" d="M 11 2 L 11 11 L 2 11 L 2 13 L 11 13 L 11 22 L 13 22 L 13 13 L 22 13 L 22 11 L 13 11 L 13 2 Z"/></svg>\n    ';const r=document.createElement("div");null!==e&&e.remove(),t.classList.add("add-task"),r.classList.add("add-div"),r.innerHTML="ADD TASK",t.appendChild(n),t.appendChild(r),a.appendChild(t)})(),(()=>{const e=document.querySelector(".add-task");e.addEventListener("click",(()=>{e.style.display="none",(()=>{const e=document.createElement("div"),t=document.createElement("div");e.classList.add("overlay"),t.classList.add("taskFormContainer"),t.innerHTML='<form action="" method="" id="taskForm">\n        <div class="form-control">\n            <div class="titleDiv">\n                <label for="title">TITLE: *</label>\n                <input type="text" name="title" id="title" required placeholder="LeetCode"\n                    minlength="2" maxlength="20" autofocus>\n            </div>\n            <div>\n                <label for="details">DETAILS: </label>\n                <textarea name="details" id="details" rows="4" cols="50"></textarea>\n            </div>\n            <div class="dueDiv">\n                <label for="due">DUE DATE: *</label>\n                <input type="date" name="due" id="due" required \n                    placeholder="05/22/2023">\n            </div>\n            <div>\n                <label for="priority">PRIORITY: *</label>\n                <div class="priority">\n                    <input type="radio" id="high" name="priority" value="HIGH">\n                    <label for="high">HIGH</label>\n                    <input type="radio" id="medium" name="priority" value="MEDIUM" checked>\n                    <label for="medium">MEDIUM</label>\n                    <input type="radio" id="low" name="priority" value="LOW">\n                    <label for="low">LOW</label>\n                </div>\n            </div>\n            <div class="taskBtnContainer">\n                <button type="button" class="createTaskBtn">CREATE TASK</button>\n                <button type="button" class="cancelTaskBtn">CANCEL</button>\n                \x3c!--Use input type="submit" to enable form built-in validations--\x3e\n                \x3c!--input type="submit" class="createTaskBtn" value="CREATE TASK"--\x3e\n            </div>\n        </div>\n    </form>',a.appendChild(e),a.appendChild(t)})(),ye()}))})(),ge()}))}))};function De(){const e=document.querySelector(".add-project"),t=document.querySelector(".projectForm");e.style.display="none",t.style.display="block"}function Se(){const e=document.querySelector(".add-project"),t=document.querySelector(".projectForm");e.style.display="block",t.style.display="none"}document.querySelector(".sidebar"),document.querySelector(".add-project"),Te(),document.querySelector(".sidebar").appendChild((()=>{const e=document.createElement("div"),t=document.createElement("input"),n=document.createElement("div"),r=document.createElement("button"),a=document.createElement("button");return e.classList.add("projectForm"),n.classList.add("btnContainer"),t.setAttribute("type","text"),t.classList.add("projectInput"),t.placeholder="Project Name",r.textContent="Create",r.setAttribute("type","button"),r.classList.add("createBtn"),a.textContent="Cancel",a.setAttribute("type","button"),a.classList.add("cancelBtn"),n.appendChild(r),n.appendChild(a),e.appendChild(t),e.appendChild(n),{projectForm:e}})().projectForm),document.querySelector(".add-project").addEventListener("click",De),document.querySelector(".createBtn").addEventListener("click",be),document.querySelector(".cancelBtn").addEventListener("click",Se),Ce(),document.querySelector(".projectForm").style.display="none"})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,